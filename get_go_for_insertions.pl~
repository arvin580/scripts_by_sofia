#!/usr/bin/perl -w
use strict;

##use file from get_insertions_class.pl
my $file = shift;

##use GOSlim from MSU ftp site
my $GO = shift;

my %GO;
my %GO_genes;
my %enrichment;
open GO, $GO or die "can't open $GO\n";
while ( my $line = <GO> ) {
  next if $line =~ /GOSlim_acc/;
  chomp $line;
  my ( $model, $GOSlim_acc, $GOSlim_name, $aspect ) = split /\s+/, $line;
  next if $aspect ne 'F';
  next if $GOSlim_acc eq 'GO:0003674';
  $GO{$GOSlim_acc}{model}       = $model;
  $GO{$GOSlim_acc}{GOSlim_name} = $GOSlim_name;
  $GO{$GOSlim_acc}{aspect}      = $aspect;
  my ($gene) = $model =~ /^(\S+)\.\d+/;
  ${ $GO_genes{$gene} }{$GOSlim_acc} = 1;
}
print "insert_pos\tgeneID\tinsert_feature\tinsert_type\tGO\n";

open INFILE, "$file" or die;
while ( my $line = <INFILE> ) {
  next if $line eq "\n";
  next if $line =~ /source/;
  chomp $line;
  #A123_0  Chr10   21849910        homozygous      0       21.5    intergenic      21849727        21858749        LOC_Os10g40720:21847804..21849726(-)/LOC_Os10g40730:21858750..21861307(+)     LOC_Os10g40730  n/a
  my (
    $source,   $ref,      $start,          $insert_type,
    $spanners, $flankers, $insert_feature, $f_start,
    $f_end,    $f_strand, $f_name,         $f_note
  ) = split /\s+/, $line;
  my $gene = $f_name;
  if ( $insert_feature eq 'intergenic' ) {
    my $dfs = $start - $f_start;
    my $dfe = $f_end = $start;
    ##  LOC_Os10g41820:22503433..22510131(-)/LOC_Os10g41829:22511022..22513298(+)
    my ($g2l,$g2l_strand, $g2r, $g2r_strand) = $f_strand =~ /^(LOC_.+):.+\((.)\)\/(LOC_.+):.+\((.)\)/;
    if ( $dfs < $dfe and $dfs <= 1000 ) {
      $gene = $g2l;
      if ($g2l_strand eq '+'){
        $insert_feature = '3prime';
      }else {
        $insert_feature = 'promoter';
      }
      my $go = get_go($gene);
      print "$ref:$start\t$gene\t$insert_feature\t$insert_type\t$go\n";
      if (defined $go and $go ne ''){
        foreach my $go (split ';' , $go){
        my ($acc,$aspect,$desc) = split ',' , $go ;
        $enrichment{all}{all}{$acc}{desc}=$desc;
        $enrichment{all}{all}{$acc}{count}++;
        $enrichment{$insert_type}{$insert_feature}{$acc}{desc}=$desc;
        $enrichment{$insert_type}{$insert_feature}{$acc}{count}++;
        $enrichment{$insert_type}{all}{$acc}{desc}=$desc;
        $enrichment{$insert_type}{all}{$acc}{count}++;
        }
      }
    }
    elsif ( $dfe < $dfs and $dfe <= 500 ) {
      $gene = $g2r;
      if ($g2r_strand eq '-'){
        $insert_feature = '3prime';
      }else {
        $insert_feature = 'promoter';
      }
      my $go = get_go($gene);
      print "$ref:$start\t$gene\t$insert_feature\t$insert_type\t$go\n";
      if (defined $go and $go ne ''){
        foreach my $go (split ';' , $go){
        my ($acc,$aspect,$desc) = split ',' , $go ;
        $enrichment{all}{all}{$acc}{desc}=$desc;
        $enrichment{all}{all}{$acc}{count}++;
        $enrichment{$insert_type}{$insert_feature}{$acc}{desc}=$desc;
        $enrichment{$insert_type}{$insert_feature}{$acc}{count}++;
        $enrichment{$insert_type}{all}{$acc}{desc}=$desc;
        $enrichment{$insert_type}{all}{$acc}{count}++;
        }
      }
    }
  }
  elsif ( $insert_feature !~ /mRNA/ ) {
    my $go = get_go($gene);
    print "$ref:$start\t$gene\t$insert_feature\t$insert_type\t$go\n";
    if (defined $go and $go ne ''){
      foreach my $go (split ';' , $go){
      my ($acc,$aspect,$desc) = split ',' , $go ;
      $enrichment{all}{all}{$acc}{desc}=$desc;
      $enrichment{all}{all}{$acc}{count}++;
      $enrichment{$insert_type}{$insert_feature}{$acc}{desc}=$desc;
      $enrichment{$insert_type}{$insert_feature}{$acc}{count}++;
      $enrichment{$insert_type}{all}{$acc}{desc}=$desc;
      $enrichment{$insert_type}{all}{$acc}{count}++;
      }
    }
  }

}

print "\nGO enrichment in insert types\n";
foreach my $type (sort keys %enrichment){
  foreach my $go (sort {$enrichment{$type}{all}{$b}{count} <=> $enrichment{$type}{all}{$a}{count}} keys %{$enrichment{$type}{all}}){
      print "$go\t$type\t$enrichment{$type}{all}{$go}{desc}\t$enrichment{$type}{all}{$go}{count}\n"
  }
}

sub get_go {
  my $gene = shift;
  my @all_GOs;
  foreach my $go_acc ( keys %{ $GO_genes{$gene} } ) {
    my $GO_name   = $GO{$go_acc}{GOSlim_name};
    my $GO_aspect = $GO{$go_acc}{aspect};
    push @all_GOs, "$go_acc, $GO_aspect, $GO_name";
  }
  return join( ";", @all_GOs );
}
